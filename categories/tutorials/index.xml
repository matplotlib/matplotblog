<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tutorials on Matplotblog</title><link>https://matplotlib.org/matplotblog/categories/tutorials/</link><description>Recent content in tutorials on Matplotblog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 11 Mar 2022 11:10:06 +0000</lastBuildDate><atom:link href="https://matplotlib.org/matplotblog/categories/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>How to create custom tables</title><link>https://matplotlib.org/matplotblog/posts/how-to-create-custom-tables/</link><pubDate>Fri, 11 Mar 2022 11:10:06 +0000</pubDate><guid>https://matplotlib.org/matplotblog/posts/how-to-create-custom-tables/</guid><description>Introduction This tutorial will teach you how to create custom tables in Matplotlib, which are extremely flexible in terms of the design and layout. You’ll hopefully see that the code is very straightforward! In fact, the main methods we will be using are ax.text() and ax.plot().
I want to give a lot of credit to Todd Whitehead who has created these types of tables for various Basketball teams and players. His approach to tables is nothing short of fantastic due to the simplicity in design and how he manages to effectively communicate data to his audience.</description></item><item><title>Battery Charts - Visualise usage rates &amp; more</title><link>https://matplotlib.org/matplotblog/posts/visualising-usage-using-batteries/</link><pubDate>Thu, 19 Aug 2021 16:52:58 +0530</pubDate><guid>https://matplotlib.org/matplotblog/posts/visualising-usage-using-batteries/</guid><description>Introduction I have been creating common visualisations like scatter plots, bar charts, beeswarms etc. for a while and thought about doing something different. Since I'm an avid football fan, I thought of ideas to represent players&amp;rsquo; usage or involvement over a period (a season, a couple of seasons). I have seen some cool visualisations like donuts which depict usage and I wanted to make something different and simple to understand. I thought about representing batteries as a form of player usage and it made a lot of sense.</description></item><item><title>The Python Graph Gallery: hundreds of python charts with reproducible code.</title><link>https://matplotlib.org/matplotblog/posts/python-graph-gallery.com/</link><pubDate>Sat, 24 Jul 2021 14:06:57 +0200</pubDate><guid>https://matplotlib.org/matplotblog/posts/python-graph-gallery.com/</guid><description>Data visualization is a key step in a data science pipeline. Python offers great possibilities when it comes to representing some data graphically, but it can be hard and time-consuming to create the appropriate chart.
The Python Graph Gallery is here to help. It displays many examples, always providing the reproducible code. It allows to build the desired chart in minutes.
About 400 charts in 40 sections The gallery currently provides more than 400 chart examples.</description></item><item><title>Stellar Chart, a Type of Chart to Be on Your Radar</title><link>https://matplotlib.org/matplotblog/posts/stellar-chart-alternative-radar-chart/</link><pubDate>Sun, 10 Jan 2021 20:29:40 +0000</pubDate><guid>https://matplotlib.org/matplotblog/posts/stellar-chart-alternative-radar-chart/</guid><description>In May 2020, Alexandre Morin-Chassé published a blog post about the stellar chart. This type of chart is an (approximately) direct alternative to the radar chart (also known as web, spider, star, or cobweb chart) — you can read more about this chart here.
In this tutorial, we will see how we can create a quick-and-dirty stellar chart. First of all, let's get the necessary modules/libraries, as well as prepare a dummy dataset (with just a single record).</description></item><item><title>Figures in the IPCC Special Report on Global Warming of 1.5°C (SR15)</title><link>https://matplotlib.org/matplotblog/posts/ipcc-sr15/</link><pubDate>Thu, 31 Dec 2020 08:32:45 +0100</pubDate><guid>https://matplotlib.org/matplotblog/posts/ipcc-sr15/</guid><description>Background Cover of the IPCC SR15
The IPCC's Special Report on Global Warming of 1.5°C (SR15), published in October 2018, presented the latest research on anthropogenic climate change. It was written in response to the 2015 UNFCCC's &amp;ldquo;Paris Agreement&amp;rdquo; of
holding the increase in the global average temperature to well below 2 °C above pre-industrial levels and to pursue efforts to limit the temperature increase to 1.5 °C [&amp;hellip;]&amp;quot;.</description></item><item><title>Visualizing Code-Switching with Step Charts</title><link>https://matplotlib.org/matplotblog/posts/codeswitching-visualization/</link><pubDate>Sat, 26 Sep 2020 19:41:21 -0700</pubDate><guid>https://matplotlib.org/matplotblog/posts/codeswitching-visualization/</guid><description>Introduction Code-switching is the practice of alternating between two or more languages in the context of a single conversation, either consciously or unconsciously. As someone who grew up bilingual and is currently learning other languages, I find code-switching a fascinating facet of communication from not only a purely linguistic perspective, but also a social one. In particular, I've personally found that code-switching often helps build a sense of community and familiarity in a group and that the unique ways in which speakers code-switch with each other greatly contribute to shaping group dynamics.</description></item><item><title>Elementary Cellular Automata</title><link>https://matplotlib.org/matplotblog/posts/elementary-cellular-automata/</link><pubDate>Tue, 14 Jul 2020 15:48:23 -0400</pubDate><guid>https://matplotlib.org/matplotblog/posts/elementary-cellular-automata/</guid><description>Cellular automata are discrete models, typically on a grid, which evolve in time. Each grid cell has a finite state, such as 0 or 1, which is updated based on a certain set of rules. A specific cell uses information of the surrounding cells, called it's neighborhood, to determine what changes should be made. In general cellular automata can be defined in any number of dimensions. A famous two dimensional example is Conway's Game of Life in which cells &amp;ldquo;live&amp;rdquo; and &amp;ldquo;die&amp;rdquo;, sometimes producing beautiful patterns.</description></item><item><title>Animate Your Own Fractals in Python with Matplotlib</title><link>https://matplotlib.org/matplotblog/posts/animated-fractals/</link><pubDate>Sat, 04 Jul 2020 00:06:36 +0200</pubDate><guid>https://matplotlib.org/matplotblog/posts/animated-fractals/</guid><description>Imagine zooming an image over and over and never go out of finer details. It may sound bizarre but the mathematical concept of fractals opens the realm towards this intricating infinity. This strange geometry exhibits the same or similar patterns irrespectively of the scale. We can see one fractal example in the image above.
The fractals may seem difficult to understand due to their peculiarity, but that's not the case. As Benoit Mandelbrot, one of the founding fathers of the fractal geometry said in his legendary TED Talk:</description></item><item><title>Animated polar plot with oceanographic data</title><link>https://matplotlib.org/matplotblog/posts/animated-polar-plot/</link><pubDate>Fri, 12 Jun 2020 09:56:36 +0200</pubDate><guid>https://matplotlib.org/matplotblog/posts/animated-polar-plot/</guid><description>The ocean is a key component of the Earth climate system. It thus needs a continuous real-time monitoring to help scientists better understand its dynamic and predict its evolution. All around the world, oceanographers have managed to join their efforts and set up a Global Ocean Observing System among which Argo is a key component. Argo is a global network of nearly 4000 autonomous probes or floats measuring pressure, temperature and salinity from the surface to 2000m depth every 10 days.</description></item><item><title>Emoji Mosaic Art</title><link>https://matplotlib.org/matplotblog/posts/emoji-mosaic-art/</link><pubDate>Sun, 24 May 2020 19:11:01 +0530</pubDate><guid>https://matplotlib.org/matplotblog/posts/emoji-mosaic-art/</guid><description>A while back, I came across this cool repository to create emoji-art from images. I wanted to use it to transform my mundane Facebook profile picture to something more snazzy. The only trouble? It was written in Rust.
So instead of going through the process of installing Rust, I decided to take the easy route and spin up some code to do the same in Python using matplotlib.
Because that's what anyone sane would do, right?</description></item><item><title>Draw all graphs of N nodes</title><link>https://matplotlib.org/matplotblog/posts/draw-all-graphs-of-n-nodes/</link><pubDate>Thu, 07 May 2020 09:05:32 +0100</pubDate><guid>https://matplotlib.org/matplotblog/posts/draw-all-graphs-of-n-nodes/</guid><description>The other day I was homeschooling my kids, and they asked me: &amp;ldquo;Daddy, can you draw us all possible non-isomorphic graphs of 3 nodes&amp;rdquo;? Or maybe I asked them that? Either way, we happily drew all possible graphs of 3 nodes, but already for 4 nodes it got hard, and for 5 nodes - plain impossible!
So I thought: let me try to write a brute-force program to do it! I spent a few hours sketching some smart dynamic programming solution to generate these graphs, and went nowhere, as apparently the problem is quite hard.</description></item><item><title>Matplotlib Cyberpunk Style</title><link>https://matplotlib.org/matplotblog/posts/matplotlib-cyberpunk-style/</link><pubDate>Fri, 27 Mar 2020 20:26:07 +0100</pubDate><guid>https://matplotlib.org/matplotblog/posts/matplotlib-cyberpunk-style/</guid><description>1 - The Basis Let's make up some numbers, put them in a Pandas dataframe and plot them:
import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame({'A': [1, 3, 9, 5, 2, 1, 1],
'B': [4, 5, 5, 7, 9, 8, 6]})
df.plot(marker='o')
plt.show()
2 - The Darkness Not bad, but somewhat ordinary. Let's customize it by using Seaborn's dark style, as well as changing background and font colors:</description></item><item><title>Matplotlib for Making Diagrams</title><link>https://matplotlib.org/matplotblog/posts/mpl-for-making-diagrams/</link><pubDate>Wed, 19 Feb 2020 12:57:07 -0500</pubDate><guid>https://matplotlib.org/matplotblog/posts/mpl-for-making-diagrams/</guid><description>Matplotlib for diagrams This is my first post for the Matplotlib blog so I wanted to lead with an example of what I most love about it: How much control Matplotlib gives you. I like to use it as a programmable drawing tool that happens to be good at plotting data.
The default layout for Matplotlib works great for a lot of things, but sometimes you want to exert more control.</description></item><item><title>Create Ridgeplots in Matplotlib</title><link>https://matplotlib.org/matplotblog/posts/create-ridgeplots-in-matplotlib/</link><pubDate>Sat, 15 Feb 2020 09:50:16 +0100</pubDate><guid>https://matplotlib.org/matplotblog/posts/create-ridgeplots-in-matplotlib/</guid><description>Introduction This post will outline how we can leverage gridspec to create ridgeplots in Matplotlib. While this is a relatively straightforward tutorial, some experience working with sklearn would be beneficial. Naturally it being a vast undertaking, this will not be an sklearn tutorial, those interested can read through the docs here. However, I will use its KernelDensity module from sklearn.neighbors.
Packages import pandas as pd
import numpy as np
from sklearn.</description></item><item><title>Create a Tesla Cybertruck That Drives</title><link>https://matplotlib.org/matplotblog/posts/create-a-tesla-cybertruck-that-drives/</link><pubDate>Sun, 12 Jan 2020 13:35:34 -0500</pubDate><guid>https://matplotlib.org/matplotblog/posts/create-a-tesla-cybertruck-that-drives/</guid><description>My name is Ted Petrou, founder of Dunder Data, and in this tutorial you will learn how to create the new Tesla Cybertruck using Matplotlib. I was inspired by the image below which was originally created by Lynn Fisher (without Matplotlib).
Before going into detail, let's jump to the results. Here is the completed recreation of the Tesla Cybertruck that drives off the screen.
Tutorial A tutorial now follows containing all the steps that creates a Tesla Cybertruck that drives.</description></item><item><title>An Inquiry Into Matplotlib's Figures</title><link>https://matplotlib.org/matplotblog/posts/an-inquiry-into-matplotlib-figures/</link><pubDate>Tue, 24 Dec 2019 11:25:42 +0530</pubDate><guid>https://matplotlib.org/matplotblog/posts/an-inquiry-into-matplotlib-figures/</guid><description>Preliminaries # This is specific to Jupyter Notebooks
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
A Top-Down runnable Jupyter Notebook with the exact contents of this blog can be found here
An interactive version of this guide can be accessed on Google Colab
A word before we get started&amp;hellip; Although a beginner can follow along with this guide, it is primarily meant for people who have at least a basic knowledge of how Matplotlib's plotting functionality works.</description></item><item><title>Custom 3D engine in Matplotlib</title><link>https://matplotlib.org/matplotblog/posts/custom-3d-engine/</link><pubDate>Wed, 18 Dec 2019 09:05:32 +0100</pubDate><guid>https://matplotlib.org/matplotblog/posts/custom-3d-engine/</guid><description>Matplotlib has a really nice 3D interface with many capabilities (and some limitations) that is quite popular among users. Yet, 3D is still considered to be some kind of black magic for some users (or maybe for the majority of users). I would thus like to explain in this post that 3D rendering is really easy once you've understood a few concepts. To demonstrate that, we'll render the bunny above with 60 lines of Python and one Matplotlib call.</description></item><item><title>Creating the Warming Stripes in Matplotlib</title><link>https://matplotlib.org/matplotblog/posts/warming-stripes/</link><pubDate>Mon, 11 Nov 2019 09:21:28 +0100</pubDate><guid>https://matplotlib.org/matplotblog/posts/warming-stripes/</guid><description>Earth's temperatures are rising and nothing shows this in a simpler, more approachable graphic than the “Warming Stripes”. Introduced by Prof. Ed Hawkins they show the temperatures either for the global average or for your region as colored bars from blue to red for the last 170 years, available at #ShowYourStripes.
The stripes have since become the logo of the Scientists for Future. Here is how you can recreate this yourself using Matplotlib.</description></item><item><title>How to Contribute</title><link>https://matplotlib.org/matplotblog/posts/how-to-contribute/</link><pubDate>Thu, 10 Oct 2019 21:37:03 -0400</pubDate><guid>https://matplotlib.org/matplotblog/posts/how-to-contribute/</guid><description>Matplotblog relies on your contributions to it. We want to showcase all the amazing projects that make use of Matplotlib. In this post, we will see which steps you have to follow to add a post to our blog.
To manage your contributions, we will use Git pull requests. So, if you have not done it already, you first need to fork and clone our Git repository, by clicking on the Fork button on the top right corner of the Github page, and then type the following in a terminal window:</description></item></channel></rss>